# Generated by Django 4.2.6 on 2023-10-18 02:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Cuidado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "estado_crecimiento",
                    models.CharField(
                        choices=[
                            ("Germinación", "Germinación"),
                            ("Crecimiento vegetativo", "Crecimiento Vegetativo"),
                            ("Fructificación", "Fructificación"),
                            ("Senescencia", "Senescencia"),
                        ],
                        max_length=50,
                    ),
                ),
                ("descripcion", models.TextField()),
            ],
            options={
                "db_table": "cuidados",
            },
        ),
        migrations.CreateModel(
            name="Cultivo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=50)),
                (
                    "tipo_alimento",
                    models.CharField(
                        choices=[
                            ("Tubérculo", "Tubérculo"),
                            ("Fruta", "Fruta"),
                            ("Hortaliza", "Hortaliza"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "tipo_propagacion",
                    models.CharField(
                        choices=[("Tallo", "Tallo"), ("Semilla", "Semilla")],
                        max_length=10,
                    ),
                ),
                (
                    "cuidado",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cultivos.cuidado",
                    ),
                ),
            ],
            options={
                "db_table": "cultivos",
            },
        ),
        migrations.CreateModel(
            name="Requisito",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("temperatura", models.DecimalField(decimal_places=2, max_digits=5)),
                ("humedad", models.DecimalField(decimal_places=2, max_digits=3)),
                ("ph_suelo", models.DecimalField(decimal_places=2, max_digits=5)),
                ("cantidad_riego", models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                "db_table": "requisitos",
            },
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "cultivo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cultivos.cultivo",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="usuarios", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True, related_name="usuarios", to="auth.permission"
                    ),
                ),
            ],
            options={
                "db_table": "usuarios",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="cultivo",
            name="requisito",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="cultivos.requisito"
            ),
        ),
    ]
